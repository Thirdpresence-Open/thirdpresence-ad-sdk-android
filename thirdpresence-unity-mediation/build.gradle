apply plugin: 'com.android.library'
apply plugin: 'org.ajoberstar.grgit'

group = 'com.thirdpresence.adsdk.mediation.unity'

def versionString = getVersionName()
def buildNum = getBuildNumber()
def fullVersionString = versionString + "." + buildNum

version = fullVersionString
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode buildNum
        versionName versionString
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    jcenter()
    flatDir{
        dirs '../external'
    }
}

configurations {
    javadocDeps
}

dependencies {
    compile 'com.android.support:support-compat:24.2.1'
    compile 'com.android.support:support-core-utils:24.2.1'
    compile 'com.android.support:support-annotations:24.2.1'
    compile 'com.google.android.gms:play-services-ads:9.6.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':thirdpresence-ad-sdk')
    javadocDeps project(':thirdpresence-ad-sdk').fileTree(include: ['*.jar'], dir: 'build/libs')
    javadocDeps 'com.android.support:support-v4:24.1.1:sources'
    javadocDeps 'com.android.support:support-annotations:24.1.1:sources'
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc, dependsOn: sourcesJar) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    exclude '**/BuildConfig.java'
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def unityeditor = properties.getProperty("unity.editor")
def xvfb = properties.getProperty("unity.xvfb")
def sdk_home = properties.getProperty("sdk.dir")

if (xvfb != null) {
    unityeditor = "$xvfb $unityeditor"
}

def unityPackageBasename = "thirdpresence-ad-sdk-android"
def unityPackageFile = "${unityPackageBasename}.unitypackage"

task buildUnityPackage << {
    if (unityeditor == null) {
        logger.warn('unity.editor is not set in local.properties. The value must be a path to Unity Editor.')
        throw new GradleException('Could not find Unity Editor')
    } else {

        assert file("$sdk_home/extras/android/m2repository/com/android/support/support-compat/24.2.1").exists()
        assert file("$sdk_home/extras/android/m2repository/com/android/support/support-core-utils/24.2.1").exists()
        assert file("$sdk_home/extras/google/m2repository/com/google/android/gms/play-services-ads/9.6.1").exists()
        assert file("$sdk_home/extras/google/m2repository/com/google/android/gms/play-services-basement/9.6.1").exists()

        copy {
            from(new File(project(':thirdpresence-ad-sdk').buildDir, 'outputs/aar')) {
                include '*-release.aar'
            }
            from('build/outputs/aar') {
                include '*-release.aar'
            }
            from('unity-package') {
                include 'AndroidManifest.xml'
            }
            from("$sdk_home/extras/android/m2repository/com/android/support/support-compat/24.2.1") {
                include '*.aar'
            }
            from("$sdk_home/extras/android/m2repository/com/android/support/support-core-utils/24.2.1") {
                include '*.aar'
            }
            from("$sdk_home/extras/google/m2repository/com/google/android/gms/play-services-ads/9.6.1") {
                include '*.aar'
            }
            from("$sdk_home/extras/google/m2repository/com/google/android/gms/play-services-basement/9.6.1") {
                include '*.aar'
            }
            rename '(.+)-release(.+)', '$1$2'
            into 'unity-package/ThirdpresenceAdSDK/Assets/Plugins/Android'
        }

        delete fileTree(dir: 'unity-package/ThirdpresenceAdSDK/Assets', include: '**/*.meta')

        mkdir(new File("$projectDir/build/unity"));

        exec {
            executable "bash"
            args "-c", "$unityeditor -force-free -nographics -quit -batchmode -projectPath $projectDir/unity-package/ThirdpresenceAdSDK -logFile $projectDir/unity-package/ThirdpresenceAdSDK/setup.log -executeMethod Autobuild.SetToolPaths"
        }

        exec {
            executable "bash"
            args "-c", "$unityeditor -force-free -nographics -quit -batchmode -projectPath $projectDir/unity-package/ThirdpresenceAdSDK -exportPackage Assets/Plugins ../../build/unity/${unityPackageFile} -logFile $projectDir/unity-package/ThirdpresenceAdSDK/export.log"
        }


    }
}
buildUnityPackage.enabled = true

task cleanUnityBuild << {
    delete fileTree(dir: 'unity-package/export' , include: '*')
    delete fileTree(dir: 'unity-package/Thirdpresence/Assets' , include: '**/*.meta')
    delete fileTree(dir: 'unity-package/ThirdpresenceAdSDK/Assets/Plugins/Android' , include: '*.aar')
}
cleanUnityBuild.mustRunAfter(clean)
cleanUnityBuild.enabled = true
