apply plugin: 'com.android.library'
apply plugin: 'org.ajoberstar.grgit'

group = 'com.thirdpresence.adsdk.mediation.unity'

def versionString = getVersionName()
def buildNum = getBuildNumber()
def fullVersionString = versionString + "." + buildNum

version = fullVersionString
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode buildNum
        versionName versionString
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    jcenter()
    flatDir{
        dirs '../external'
    }
}

configurations {
    javadocDeps
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':thirdpresence-ad-sdk')
    javadocDeps project(':thirdpresence-ad-sdk').fileTree(include: ['*.jar'], dir: 'build/libs')
    javadocDeps 'com.android.support:support-annotations:23.2.1:sources'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc, dependsOn: sourcesJar) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    exclude '**/BuildConfig.java'
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def unityeditor = properties.getProperty("unity.editor")
def xvfb = properties.getProperty("unity.xvfb")

if (xvfb != null) {
    unityeditor = "$xvfb $unityeditor"
}
def unityPackageDir = "$projectDir/unity-package/export"
def unityPackageBasename = "thirdpresence-ad-sdk"
def unityPackageFile = "${unityPackageBasename}.unitypackage"

assembleRelease.doLast {
    copy {
        from(new File(project(':thirdpresence-ad-sdk').buildDir, 'outputs/aar')) {
            include '*-release.aar'
        }
        from('build/outputs/aar') {
            include '*-release.aar'
        }
        rename '(.+)-release(.+)', '$1$2'
        into 'unity-package/ThirdpresenceAdSDK/Assets/Plugins/Android'
    }

    delete fileTree(dir: 'unity-package/export' , include: '*')
    delete fileTree(dir: 'unity-package/Thirdpresence/Assets' , include: '**/*.meta')

    exec {
        executable "bash"
        args "-c", "$unityeditor -force-free -nographics -quit -batchmode -projectPath $projectDir/unity-package/ThirdpresenceAdSDK -exportPackage Assets/Plugins ../export/${unityPackageFile} -logFile $projectDir/unity-package/ThirdpresenceAdSDK/log.txt"
    }

    mkdir(new File("$unityPackageDir/$fullVersionString"));

    copy {
        from file("$unityPackageDir/${unityPackageFile}")
        into "$unityPackageDir/$fullVersionString"
    }

    delete file("$unityPackageDir/${unityPackageFile}");
}
