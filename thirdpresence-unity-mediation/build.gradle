import org.gradle.internal.os.OperatingSystem;
import org.gradle.api.GradleException

apply plugin: 'com.android.library'

group = 'com.thirdpresence.adsdk.mediation.unity'
version = rootProject.ext.versionString

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.buildNum
        versionName rootProject.ext.versionString
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    google()
    jcenter()
    flatDir{
        dirs '../external'
    }
}

configurations {
    javadocDeps
}

dependencies {
    api "com.android.support:support-compat:${rootProject.ext.supportLibVersion}"
    api "com.android.support:support-core-utils:${rootProject.ext.supportLibVersion}"
    api "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    api "com.google.android.gms:play-services-ads:${rootProject.ext.playServicesLibVersion}"
    api fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    api project(':thirdpresence-ad-sdk')
    javadocDeps project(':thirdpresence-ad-sdk').fileTree(include: ['*.jar'], dir: 'build/libs')
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc, dependsOn: sourcesJar) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    exclude '**/BuildConfig.java'
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task buildUnityPackage {
    def unityeditor = properties.getProperty("unity.editor")
    def xvfb = properties.getProperty("unity.xvfb")
    def sdk_home = properties.getProperty("sdk.dir")

    if (xvfb != null) {
        unityeditor = "$xvfb $unityeditor"
    }

    def scriptRunner
    def scriptArgs
    if (OperatingSystem.current().isWindows()) {
        scriptRunner = "cmd"
        scriptArgs = "/c"
    } else {
        scriptRunner = "bash"
        scriptArgs = "-c"
    }

    def unityPackageBasename = "thirdpresence-ad-sdk-android"
    def unityPackageFile = "${unityPackageBasename}.unitypackage"
    def unityAssetDir = "unity-package/ThirdpresenceAdSDK/Assets"
    def unityPluginDir = "${unityAssetDir}/Plugins/Android"
    def gradleHome = project.gradle.gradleUserHomeDir
    def gradleLibDir = "${gradleHome}/caches/modules-2/files-2.1"
    def gmsDir = "${sdk_home}/extras/google/m2repository/com/google/android/gms"

    // Final part of the path must be updated when version changes
    def supportCompatDir = "${gradleLibDir}/com.android.support/support-compat/26.0.2/342fa9af0dbea4a4d1d92fabd6fcf55a00528db5"
    def supportCoreUtilsDir = "${gradleLibDir}/com.android.support/support-core-utils/26.0.2/641bb56a309f50fe37ca6c5e48e7665f739e7c19"


    if (unityeditor == null) {
        logger.warn('unity.editor is not set in local.properties. The value must be a path to Unity Editor.')
        throw new GradleException('Could not find Unity Editor')
    }

    // TODO: Update for Windows...
    //assert file("$supportCompatDir").exists()
    //assert file("$supportCoreUtilsDir").exists()
    //assert file("$gmsDir/play-services-ads/${rootProject.ext.playServicesLibVersion}").exists()
    //assert file("$gmsDir/play-services-basement/${rootProject.ext.playServicesLibVersion}").exists()

    doLast {
        delete fileTree("$unityPluginDir") {
            include '*'
        }

        copy {
            from(new File(project(':thirdpresence-ad-sdk').buildDir, 'outputs/aar')) {
                include '*-release.aar'
            }
            from('build/outputs/aar') {
                include '*-release.aar'
            }
            from('unity-package') {
                include 'AndroidManifest.xml'
            }
            from("$supportCompatDir") {
                include '*.aar'
            }
            from("$supportCoreUtilsDir") {
                include '*.aar'
            }
            from("$gmsDir/play-services-ads/${rootProject.ext.playServicesLibVersion}") {
                include '*.aar'
            }
            from("$gmsDir/play-services-basement/${rootProject.ext.playServicesLibVersion}") {
                include '*.aar'
            }
            rename '(.+)-release(.+)', '$1$2'
            into "$unityPluginDir"
        }

        delete fileTree(dir: "$unityAssetDir", include: '**/*.meta')

        mkdir(new File("$projectDir/build/unity"));

        exec {
            executable "$scriptRunner"
            args "$scriptArgs", "$unityeditor -force-free -nographics -quit -batchmode -projectPath \"$projectDir/unity-package/ThirdpresenceAdSDK\" -logFile \"$projectDir/unity-package/ThirdpresenceAdSDK/setup.log\" -executeMethod Autobuild.SetToolPaths"
        }

        exec {
            executable "$scriptRunner"
            args "$scriptArgs", "$unityeditor -force-free -nographics -quit -batchmode -projectPath \"$projectDir/unity-package/ThirdpresenceAdSDK\" -exportPackage Assets/Plugins ../../build/unity/${unityPackageFile} -logFile \"$projectDir/unity-package/ThirdpresenceAdSDK/export.log\""
        }
    }
}
buildUnityPackage.enabled = true

clean {
    doLast {
        delete fileTree(dir: 'unity-package/export', include: '*')
        delete fileTree(dir: 'unity-package/Thirdpresence/Assets', include: '**/*.meta')
        delete fileTree(dir: 'unity-package/ThirdpresenceAdSDK/Assets/Plugins/Android', include: '*')
    }
}

